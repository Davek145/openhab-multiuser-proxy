# Server configuration for the openHAB multiuser proxy
# Requires the openhab-multiuser-proxy npm package (https://www.npmjs.com/package/openhab-multiuser-proxy)

# Extend nginx access log with user & org.
log_format ohmp '$remote_addr - [$ssl_client_s_dn_cn / $ssl_client_s_dn_ou] [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

server {
    listen                                    80;
    # Set the server name
    server_name                               $server_name;
    return 301                                https://$server_name$request_uri;
}

map $ssl_client_s_dn $ssl_client_s_dn_cn {
    default "";
    ~(^|,)CN=(?<CN>[^,]+) $CN;
}

map $ssl_client_s_dn $ssl_client_s_dn_ou {
    default "";
    ~(^|,)OU=(?<OU>[^,]+) $OU;
}

# Filtered access.
server {
    listen                                    443 ssl http2;
    # Set the server name
    server_name                               $server_name;

    proxy_ssl_server_name                     on;

    # rsa
    ssl_certificate                           /etc/ssl/openhab_rsa.crt;
    ssl_certificate_key                       /etc/ssl/openhab_rsa.pem;
    # ecc - disable you do not provide ecc cert
    #ssl_certificate                           /etc/ssl/openhab_ecc.crt;
    #ssl_certificate_key                       /etc/ssl/openhab_ecc.pem;

    # client certificate authentication
    ssl_client_certificate                    /etc/ssl/openhab_mtls_CA.crt;
    ssl_crl                                   /etc/ssl/openhab_mtls_CRL.pem;
    ssl_verify_client                         on;

    # Remove if using self-signed and are having trouble.
    add_header Strict-Transport-Security      "max-age=15552000; includeSubDomains; preload";

    # Cross-Origin Resource Sharing.
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow_Credentials' 'true' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
    add_header 'Access-Control-Allow-Methods' 'GET,POST,PUT,DELETE' always;

    # openHAB 3 api authentication
    add_header Set-Cookie                     X-OPENHAB-AUTH-HEADER=1;

    # ModSecurity - enable for use with libmodsecurity3 in NGINX
    #modsecurity on;
    #modsecurity_rules_file /etc/nginx/modsecurity/main.conf; #modify based on your modsecurity configuration
    #modsecurity_rules '
    #        SecRuleRemoveById 942100
    #';

# The following routes are required for the openHAB app.
  # Dynamic resources, reponse depends on client access.
    # Provides:
    #   - GET /rest/items Get all available Items for client.
    #   - GET /rest/items/{itemname} Gets a single Item.
    #   - POST /rest/items/{itemname} Sends a command to an Item.
    #   - GET /rest/items/{itemname}/state Gets the state of an Item.
    #   - GET /rest/items/{itemname}/semantic/{semanticClass} Gets the item which defines the requested semantics of an Item.
    # From: NodeJS app
    location /rest/items {
        limit_except GET POST {
          deny all;
        }
        proxy_pass                            http://localhost:8090;
        include                               /etc/nginx/proxy-headers.conf;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }
    # Provides: Main UI Pages
    #   - GET /rest/ui/components/ui:page Get all MainUI page components available for client.
    #   - GET /rest/ui/components/ui:page/{componentUID} Get a specific MainUI page component.
    # From: NodeJS App
    location ~* /rest/ui/components/(?=ui:page) {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8090;
        include                               /etc/nginx/proxy-headers.conf;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;

    }
    # Provides: UI components for the MainUI - All other except for UI:PAGE.
    #   - GET /rest/ui/components/{namespace} Get all registered UI components in the specified namespace.
    #   - GET /rest/ui/components/{namespace}/{componentUID} Get a specific UI component in the specified namespace.
    # From: openHAB server
    location ~* /rest/ui/components/(?!ui:page) {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Prevent errors on auth endpoints when $pageid is null.
    location = /page/ {
      return 404;
    }
    # Provides:
    #   - GET /page/{pageuid} Gets MainUI page.
    # From: openHAB server
    # Uses: auth_request, $pageuid must be an allowed Page for the client
    location /page/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/page/;
        auth_request                          /auth/pages;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Prevent errors on auth endpoints when $itemname is null.
    location = /rest/persistence/items/ {
      return 404;
    }
    # Provides:
    #   - GET /rest/persistence/items/{itemname} Gets Item persistence data from the persistence service.
    # From: openHAB server
    # Uses: auth_request, $itemname must be an allowed Item for the client
    location /rest/persistence/items/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/rest/persistence/items/;
        auth_request                          /auth/items;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: SSE event listeners.
    #   - GET /rest/events/states Initiates a new Item state tracker connection.
    #   - POST /rest/events/states/{connectionId} Changes the list of Items a SSE connection will receive state updates to (only those available for client).
    # From: GET - openHAB server
    # From: POST - NodeJS app
    location /rest/events/states {
        limit_except GET POST {
          deny all;
        }

	if ($request_method = GET ) {
            proxy_pass                            http://localhost:8080;
	}
	if ($request_method = POST ) {
	    proxy_pass                            http://localhost:8090;
	}
        include                               /etc/nginx/proxy-headers.conf;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }
    # Provides: Main UI analyzer.
    # From: openHAB server
    # Note: Items for the analyzer are filtered by /rest/items
    location = /analyzer/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/analyzer/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Prevent access to login screen.
    location = /auth {
      return 403;
    }

  # Static resources.
    # Provides: Server healthcheck & MainUI.
    # From: openHAB server
    location = / {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Icon access.
    # From: openHAB server
    location /icon/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/icon/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Image access.
    # From: openHAB server
    location /images/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/images/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Style access.
    # From: openHAB server
    location /css/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/css/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: JavaScript access.
    # From: openHAB server
    location /js/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/js/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Icons & images for MainUI.
    # From: openHAB server
    location /res/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/res/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Fonts for the MainUI.
    # From: openHAB server
    location /fonts/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/fonts/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Static content from the $openhab_conf/html folder.
    # From: openHAB server
    location /static/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/static/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: Help and information page.
    # From: openHAB server
    location /about/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/about/;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides:
    #   - GET /rest/? openHAB Server & API information
    # From: openHAB Server
    location = /rest/ {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/rest/?;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: MainUI app.
    # From: openHAB server
    location = /service-worker.js {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/service-worker.js;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: UI configuration & resource list.
    # From: openHAB server
    location = /manifest.json {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/manifest.json;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: UI configuration & resource list.
    # From: openHAB server
    location ~* /(?=precache-manifest) {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080;
        include                               /etc/nginx/proxy-headers.conf;
    }
    # Provides: OpenHAB Index page.
    # From: openHAB server
    location = /index.html {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8080/index.html;
        include                               /etc/nginx/proxy-headers.conf;
    }

  #Legacy Basic UI Sitemaps - NOT ACTIVELY MAINTAINED
    # Provides:
    #   - GET /rest/sitemaps Get all available Sitemaps for a client.
    #   - GET /rest/sitemaps/{sitemapname} Gets a Sitemap by name.
    #   - GET /rest/sitemaps/{sitemapname}/{pageid} Pools the data for a Sitemap.
    # From: NodeJS app
    location /rest/sitemaps {
        limit_except GET {
          deny all;
        }
        proxy_pass                            http://localhost:8090;
        include                               /etc/nginx/proxy-headers.conf;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }
#    # Provides: SSE Sitemap event listener.
#    #   - GET /rest/sitemaps/events/{subscriptionid}?sitemap={sitemapname} Get Sitemap events.
#    #   - POST /rest/sitemaps/events/subscribe Creates a Sitemap event subscription.
#    # From: openHAB server
#    # Note: POTENTIAL DATA LEAK: Events are sent to all Sitemap items regardless of access filter for MainUI
#    location /rest/sitemaps/events/ {
#        limit_except GET POST {
#          deny all;
#        }
#	proxy_pass                            http://localhost:8080/rest/sitemaps/events/;
#        include                               /etc/nginx/proxy-headers.conf;
#    }
#    # Provides: BasicUI OH chart.
#    #   - GET /chart?items=
#    # From: GET - NodeJS app
#    location = /chart {
#        limit_except GET {
#          deny all;
#        }
#        proxy_pass                            http://localhost:8090/chart;
#        include                               /etc/nginx/proxy-headers.conf;
#        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
#        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
#    }
#    # Provides:
#    #   - GET /basicui/app?sitemap={sitemapname} Gets BASIC UI sitemaps.
#    # From: openHAB server
#    # Uses: auth_request, $sitemapname must be an allowed sitemap for the client
#    # Note: POTENTIAL DATA LEAK: Sitemaps in BASIC UI displays items and their state regardless of items access filter for MainUI
#    location ~* /basicui/(?=app) {
#        limit_except GET {
#          deny all;
#        }
#        proxy_pass                            http://localhost:8080;
#        auth_request                          /auth/sitemaps;
#        include                               /etc/nginx/proxy-headers.conf;
#    }
#    # Provides: BASIC UI sitemap components. - All other except for APP.
#    #   - GET /basicui/
#    # From: openHAB server
#    location ~* /basicui/(?!app) {
#        limit_except GET {
#          deny all;
#        }
#        proxy_pass                            http://localhost:8080;
#        include                               /etc/nginx/proxy-headers.conf;
#    }


# Authorization endpoints.
    # Provides authorization for $itemname:
    #   - */items/{itemname}
    #   - */persistence/items/{itemname}
    # By using regex: /\/items\/([a-zA-Z_0-9]+)/
    location = /auth/items {
        internal;
        proxy_pass                            http://localhost:8090/auth/items;
        proxy_pass_request_body               off;
        proxy_set_header                      Content-Length "";
        proxy_set_header                      X-Original-URI $request_uri;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }
    # Provides authorization for $pageuid:
    #   - */page/{pageuid}
    # By using regex: /\/page\/([a-zA-Z_0-9]+)/
    location = /auth/pages {
        internal;
        proxy_pass                            http://localhost:8090/auth/pages;
        proxy_pass_request_body               off;
        proxy_set_header                      Content-Length "";
        proxy_set_header                      X-Original-URI $request_uri;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }
    # Provides authorization for $sitemapname:
    #   - */sitemaps/{sitemapname}
    #   - */sitemaps/{sitemapname}/*
    # By using regex: /\/sitemaps\/([a-zA-Z_0-9]+)/
    location = /auth/sitemaps {
        internal;
        proxy_pass                            http://localhost:8090/auth/sitemaps;
        proxy_pass_request_body               off;
        proxy_set_header                      Content-Length "";
        proxy_set_header                      X-Original-URI $request_uri;
        proxy_set_header X-OPENHAB-USER       $ssl_client_s_dn_cn;
        proxy_set_header X-OPENHAB-ORG        $ssl_client_s_dn_ou;
    }

# prevent nginx error
    location / {
        #limit_except GET {
        #  deny all;
        #}
        #proxy_pass                            http://localhost:8080/rest/?;
        #include                               /etc/nginx/proxy-headers.conf;
        return 404;
    }

    access_log /var/log/nginx/$server_name.access.log       ohmp;
    error_log /var/log/nginx/$server_name.error.log;

}
